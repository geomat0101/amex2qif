#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import csv
import argparse

def readCategories(filename):
   """Read the category data from a file"""
   cats = {}
   with open(filename, 'r') as csvfile:
      csvreader = csv.reader(csvfile, delimiter=',', quotechar='"')
      for i, row in enumerate(csvreader):
         if len(row) == 0:
            # Ignore blank lines
            continue
         if len(row) < 2:
            print("Syntax error in line %d: Need 2 fields separated "
                  "by a comma: vendor, category!" % i, file=sys.stderr)
            print(row, file=sys.stderr)
            continue
         vendor = row[0].strip()
         category = row[1].strip()
         if vendor and category:
            cats[vendor] = category
         else:
            if not vendor:
               print("Error in line %d: vendor field is "
                     "empty (before the comma)!" % i, file=sys.stderr)
            else:
               print("Error in line %d: category field for "
                     "vendor='%s' is empty (after the comma)!" % (i, vendor), file=sys.stderr)
            continue
   return cats


parser = argparse.ArgumentParser(
    prog='amex2qif',
    description='''Convert American Express CSV export files to QIF format''',
    epilog='''If you provide a 'categories.txt' file in the same directory
              as the amex2qif program, it will automatically be used. 
              Each line should have the vendor name, a comman, and then 
              the category to be used when the payee matches that vendor.
              Empty lines are ignored.   A default version of this file 
              can be kept in the directory of the amex2qif executable.  If 
              a copy of this file is found in the directory that this 
              ommand is run in, it overrides the version in the executable 
              directory.
           ''')
parser.add_argument('csvfilename', type=str)
parser.add_argument('--oldstyle', action="store_true", default=False,
                    help="Use the old style format with card-holder name in column 4e")
parser.add_argument('--printcats', action="store_true", default=False,
                    help="Print the categories read from the 'categories.txt' file and exit.")
parser.add_argument('--header', action="store_true", default=False,
                    help="The first line of the CSV file contains column headers")
parser.add_argument('--complain', action="store_true", default=False,
                    help="Complain about unknown Payees (to stderr)")


args = parser.parse_args()

edir = os.path.dirname(os.path.realpath(__file__))

catmap = {}

# Read the category map
if os.path.exists('categories.txt'):
   # Local version overrides one in executable directory
   catmap = readCategories('categories.txt')
elif os.path.exists(os.path.join(edir, 'categories.txt')):
   catmap = readCategories(os.path.join(edir, 'categories.txt'))
else:
   catmap = {}

if args.printcats:
   print()
   print("CATEGORIES:")
   vendlen = max([len(v) for v in catmap])
   fmt = "  %%%ds: %%s" % vendlen
   for vend in sorted(catmap.keys()):
      cat = catmap[vend]
      print(fmt % (vend, cat))
   print
   sys.exit()

unknown_payees = set()


with open(args.csvfilename, 'r') as csvfile:
   csvreader = csv.reader(csvfile, delimiter=',', quotechar='"')
   for i, row in enumerate(csvreader):
      if len(row) == 0:
         # Ignore blank lines
         continue
      if i == 0 and args.header:
         continue
      if len(row) < 5:
         print("Error in line %d: only %d field(s)!" % (i, len(row)), file=sys.stderr)
         continue

      if args.oldstyle:
         # 01/29/2016  Fri,,"RESTAURANT","Card Holder Name","XXXX-XXXXXX-NNNNN",,,3.27,,,,,,,,
         # COLS:  0:Date, 1:Ref?, 2:Payee, 3:Card-holder-name, 4:Card-number, 5:memo, 7:Amount
         date = row[0].split()[0]
         ref = None
         payee = row[2]
         customer = row[3].split()[0]
         try:
             amount = -float(row[7])
         except:
             if isinstance(row[7], str) and i==0:
                 raise RuntimeError("The AMOUNT column (%s) in the first row of "
                                    "the CSV file is not a number.  The first row "
                                    "may contain column headers. Try running again "
                                    "with the --header option" % row[7])
             else:
                 raise RuntimeError("Error in amount (%s) in column 7 on line %d of CSV file" % (row[7], i+1))
         memo = row[5]
      else:
         try:
             date = row[0]
             ref = row[1].split()[1]
             amount = float(row[2])
             payee = row[3]
             memo = row[4]
             customer = None
             # customer = row[3].split()[0]
         except:
            print("This file does not appear to be in the standard ")
            print("Amex CSV file format.  Try adding the --oldstyle flag")
            print("Columns: date, reference, amount, payee, memo")
            sys.exit()

      category = ''

      for p, cat in catmap.items():
         if payee.upper().startswith(p.upper()):
            category = cat

      if category == '':
         unknown_payees.add(payee.upper())

      if customer:
         if memo and customer not in memo:
            memo += " (%s)" % customer

      if memo and ref:
         memo += " Ref: %s" % ref

      print("D%s" % date)
      print("T%.2f" % amount)
      print("P%s" % payee)
      print("L%s" % category)
      if memo:
         print("M%s" % memo)
      print("^")


if args.complain:
    print("\nUnrecognized Payees:", file=sys.stderr)
    for payee in sorted([s for s in unknown_payees]):
        print("   %s" % payee, file=sys.stderr)
